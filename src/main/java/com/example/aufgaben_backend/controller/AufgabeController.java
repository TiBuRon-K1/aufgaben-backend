package com.example.aufgaben_backend.controller;

import com.example.aufgaben_backend.model.Aufgabe;
import com.example.aufgaben_backend.repository.AufgabeRepository;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/aufgaben")
@CrossOrigin(origins = "*")
public class AufgabeController {

    private final AufgabeRepository aufgabeRepository;

    public AufgabeController(AufgabeRepository aufgabeRepository) {
        this.aufgabeRepository = aufgabeRepository;
    }

    // üìã –í—Å–µ –∑–∞–¥–∞—á–∏
    @GetMapping
    public List<Aufgabe> alleAufgaben() {
        return aufgabeRepository.findAll();
    }

    // üîç –û–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–æ ID
    @GetMapping("/{id}")
    public Aufgabe eineAufgabe(@PathVariable Long id) {
        return aufgabeRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Aufgabe nicht gefunden"));
    }

    // ‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    @PostMapping
    public Aufgabe neueAufgabe(@RequestBody Aufgabe aufgabe) {
        if (aufgabe.getBeschreibung() == null) {
            aufgabe.setBeschreibung("");
        }
        if (aufgabe.getErledigt() == null) {
            aufgabe.setErledigt(false);
        }
        return aufgabeRepository.save(aufgabe);
    }

    // ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π)
    @PutMapping("/{id}")
    public Aufgabe aufgabeAktualisieren(@PathVariable Long id, @RequestBody Aufgabe aktualisiert) {
        return aufgabeRepository.findById(id).map(a -> {
            if (aktualisiert.getTitel() != null) {
                a.setTitel(aktualisiert.getTitel());
            }
            if (aktualisiert.getBeschreibung() != null) {
                a.setBeschreibung(aktualisiert.getBeschreibung());
            }
            if (aktualisiert.getDatum() != null) {
                a.setDatum(aktualisiert.getDatum());
            }
            if (aktualisiert.getZeit() != null) {
                a.setZeit(aktualisiert.getZeit());
            }
            if (aktualisiert.getErledigt() != null) {
                a.setErledigt(aktualisiert.getErledigt()); // ‚úÖ –∑–∞–º–µ–Ω–∏–ª–∏ isErledigt() ‚Üí getErledigt()
            }
            return aufgabeRepository.save(a);
        }).orElseThrow(() -> new RuntimeException("Aufgabe nicht gefunden"));
    }

    // üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
    @DeleteMapping("/{id}")
    public void aufgabeL√∂schen(@PathVariable Long id) {
        aufgabeRepository.deleteById(id);
    }
}
